// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/**
 * from what I've noticed:
 * - in psql if a table name contains an upper case character
 * you have to select it with ""
 * SELECT * FROM user;    ✔️
 * SELECT * FROM "User";  ✔️
 * SELECT * FROM User;    ❌
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  USER
}

model User {
  id                      String                 @id @default(cuid())
  name                    String
  email                   String                 @unique
  password                String?
  role                    UserRole               @default(USER)
  emailVerified           DateTime?
  image                   String?
  accounts                Account[]
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  isTwoFactorEnabled      Boolean                @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?
  userAvatarCreated       dl_avatar_user[]       @relation("userAvatarCreated")
  userAvatarUpdated       dl_avatar_user[]       @relation("userAvatarUpdated")
  registrationTypeCreated dl_registration_type[] @relation("registrationTypeCreated")
  registrationTypeUpdated dl_registration_type[] @relation("registrationTypeUpdated")
  topicCreated            dl_topic[]             @relation("topicCreated")
  topicUpdated            dl_topic[]             @relation("topicUpdated")
  licenseCreated          dl_license[]           @relation("licenseCreated")
  licenseUpdated          dl_license[]           @relation("licenseUpdated")
  landingPageTypeCreated  dl_landing_page_type[] @relation("landingPageTypeCreated")
  landingPageTypeUpdated  dl_landing_page_type[] @relation("landingPageTypeUpdated")
  flagsCreated            dl_avatar_flag[]       @relation("flagsCreated")
  flagsUpdated            dl_avatar_flag[]       @relation("flagsUpdated")
  languageCreated         dl_language[]          @relation("languageCreated")
  languageUpdated         dl_language[]          @relation("languageUpdated")
  dl_featuresCreated      dl_features[]          @relation("featuresCreated")
  dl_featuresUpdated      dl_features[]          @relation("featuresUpdated")
  brandLogoCreated        dl_avatar_brand_logo[] @relation("brandLogoCreated")
  brandLogoUpdated        dl_avatar_brand_logo[] @relation("brandLogoUpdated")
  brandCreated            dl_brand[]             @relation("brandCreated")
  brandUpdated            dl_brand[]             @relation("brandUpdated")
  designAvatarCreated     dl_avatar_design[]     @relation("designAvatarCreated")
  designAvatarUpdated     dl_avatar_design[]     @relation("designAvatarUpdated")
  designCreated           dl_design[]            @relation("designCreated")
  designUpdated           dl_design[]            @relation("designUpdated")
  landingPageCreated      dl_landing_page[]      @relation("landingPageCreated")
  landingPageUpdated      dl_landing_page[]      @relation("landingPageUpdated")
  landingPagesRequested   dl_landing_page[]
  brandResourcesCreated   dl_brand_resource[]    @relation("brandResourcesCreated")
  brandResourcesUpdated   dl_brand_resource[]    @relation("brandResourcesUpdated")

  @@index([id, email, image])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id       String   @id @default(cuid())
  email    String
  emailOld String?
  token    String   @unique
  expires  DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

// =================================================================
// Designs and LPs related tables
model dl_topic {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  description   String?
  createdBy     User?             @relation("topicCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("topicUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@unique([name, slug])
  @@index([id, slug])
}

model dl_registration_type {
  id            String            @id @unique @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  description   String?
  createdBy     User?             @relation("registrationTypeCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("registrationTypeUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@unique([name, slug])
  @@index([id, slug])
}

model dl_license {
  id            String            @id @unique @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  description   String?
  createdBy     User?             @relation("licenseCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("licenseUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@unique([name, slug])
  @@index([id, slug])
}

model dl_landing_page_type {
  id            String            @id @unique @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  description   String?
  createdBy     User?             @relation("landingPageTypeCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("landingPageTypeUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@unique([name, slug])
  @@index([id, slug])
}

model dl_language {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String
  englishName   String            @unique
  slug          String            @unique
  iso_639_1     String
  iso_3166_1    String
  flag          String?
  createdBy     User?             @relation("languageCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("languageUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@index([id, slug, iso_639_1, flag])
}

model dl_features {
  id            String            @id @unique @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  description   String?
  createdBy     User?             @relation("featuresCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("featuresUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@unique([name, slug])
  @@index([id, slug])
}

model dl_brand {
  id            String              @id @default(cuid())
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  name          String              @unique
  slug          String              @unique
  logo          String?
  createdBy     User?               @relation("brandCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?               @relation("brandUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]
  resources     dl_brand_resource[]

  @@index([id, slug, logo])
}

enum dl_brand_resource_type {
  VECTOR_IMAGE
  IMAGE
  DOCUMENT
}

model dl_brand_resource {
  id            String                 @id @unique @default(cuid())
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  createdBy     User?                  @relation("brandResourcesCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?                  @relation("brandResourcesUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  name          String
  url           String
  type          dl_brand_resource_type @default(VECTOR_IMAGE)
  brand         dl_brand               @relation(fields: [brandId], references: [id])
  brandId       String

  @@index([id, brandId])
}

model dl_design {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  name          String            @unique
  slug          String            @unique
  avatar        String?
  createdBy     User?             @relation("designCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?             @relation("designUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?
  landingPages  dl_landing_page[]

  @@index([id, slug, avatar])
}

// migrationPriority?
model dl_landing_page {
  id                 String                @id @default(cuid())
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  name               String                @unique
  slug               String                @unique
  url                String                @unique
  whatsapp           Boolean               @default(false)
  isReadyForTraffic  Boolean               @default(false)
  isARTS             Boolean               @default(false)
  isUnderMaintenance Boolean               @default(false)
  requester          User?                 @relation(fields: [requesterId], references: [id])
  requesterId        String?
  topic              dl_topic?             @relation(fields: [topicId], references: [id])
  topicId            String?
  registrationType   dl_registration_type? @relation(fields: [registrationTypeId], references: [id])
  registrationTypeId String?
  license            dl_license?           @relation(fields: [licenseId], references: [id])
  licenseId          String?
  landingPageType    dl_landing_page_type? @relation(fields: [landingPageTypeId], references: [id])
  landingPageTypeId  String?
  language           dl_language?          @relation(fields: [languageId], references: [id])
  languageId         String?
  features           dl_features[]
  brand              dl_brand?             @relation(fields: [brandId], references: [id])
  brandId            String?
  design             dl_design?            @relation(fields: [designId], references: [id])
  designId           String?
  createdBy          User?                 @relation("landingPageCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId      String?
  updatedBy          User?                 @relation("landingPageUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId       String?
  isHome             Boolean               @default(false)

  @@index([id, slug, topicId, registrationTypeId, licenseId, landingPageTypeId, languageId, brandId, designId])
}

// =================================================================
// Avatars related tables
model dl_avatar_user {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  url           String
  createdBy     User?    @relation("userAvatarCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("userAvatarUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id, name])
}

model dl_avatar_flag {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  url           String
  createdBy     User?    @relation("flagsCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("flagsUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id])
}

model dl_avatar_brand_logo {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  url           String
  createdBy     User?    @relation("brandLogoCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("brandLogoUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id, url])
}

model dl_avatar_design {
  id            String   @id @unique @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  name          String   @unique
  url           String
  createdBy     User?    @relation("designAvatarCreated", fields: [createdUserId], references: [id], onDelete: SetNull)
  createdUserId String?
  updatedBy     User?    @relation("designAvatarUpdated", fields: [updateUserId], references: [id], onDelete: SetNull)
  updateUserId  String?

  @@index([id, url])
}
